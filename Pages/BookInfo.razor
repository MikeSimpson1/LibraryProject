@page "/bookinfo/{id}"

<PageTitle>Book Info</PageTitle>

@using LibraryApplication.Data
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives;
@using Microsoft.AspNetCore.Identity;

@inject BookService bookService
@inject UserManager<AppUser> userManager
@inject NavigationManager navManager

<style>
    #outer
{
    width:100%;
    text-align: center;
}
.inner
{
    display: inline-block;
}
    .card {
        /* Add shadows to create the "card" effect */
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 400px;
        padding: 5px 5px;
        border-radius: 12px;
        margin: 0 auto; /* Added */
        float: none; /* Added */
        margin-bottom: 10px; /* Added */
    }

        /* On mouse-over, add a deeper shadow */
        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    /* Add some padding inside the card container */
    .container {
        padding: 0px 0px;
    }

    .img {
        width: 128px;
        height: 185px;
    }    .center {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 50%;
}.titleText{
    text-align:center;
}
</style>
    @if (bookData != null)
{
    <h1 style="text-align: center">@bookData.Title</h1>

        <div class="card">
            <img src="@bookData.ImageLink" alt="Cover" style="width:128px;height:185px" class="card-img-top; center">
            <div class="card-body">
                <h4 class="card-title" style="text-align: center"><b>@bookData.Title</b></h4>
                <p class="titleText" style="text-align: center">@bookData.Author</p>
                <p>@bookData.Description</p>
                <p>@bookData.PublishedDate</p>
            </div>
            @if (signInManager.IsSignedIn(_httpContextAccessor.HttpContext.User))
            {
                <div id="outer">
                    <div title="@isCurrentlyReadingString" class="inner">
                        <button class="@buttonStyle1" runat="server" onclick="@ToggleIsCurrentlyReading">
                                <span class="oi oi-book" aria-hidden="true"></span>
                        </button>
                    </div>
                    <div title="@isWantToReadString" class="inner">
                        <button class="@buttonStyle2" runat="server" onclick="@ToggleIsWantToRead">
                            <span class="oi oi-list" aria-hidden="true"></span>
                        </button>
                    </div>
                    <div title="@isReadString" class="inner">
                        <button class="@buttonStyle3" runat="server" onclick="@ToggleIsRead">
                            <span class="oi oi-check" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
            }
        </div>
}
<h1>Reviews</h1>
@if (signInManager.IsSignedIn(_httpContextAccessor.HttpContext.User))
{
    <EditForm Model="@reviewData" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

            <label>
                Add a review:
                </label>
                <p>
                <InputTextArea @bind-Value="reviewData.Description" />
            
    
        <button type="submit" class="btn btn-primary" style="border-radius: 12px; background-color: white; color: black">Submit</button>
    </p>
    </EditForm>
}
@if (reviews.Count() > 0){
        foreach(var r in reviews)
        {
            <div class="card">
                    <div class="card-body">
                        <img src="https://www.pngitem.com/pimgs/m/150-1503945_transparent-user-png-default-user-image-png-png.png" alt="Cover" style="width:30px;height:30px" class="card-img-top; center">
                        <h5 class="card-title ; center"><b>@r.User</b></h5>
                        <p class="titleText">@r.Description</p>
                        <p class="titleText">@r.Date</p>
                    </div>
            </div>
        }
}
else
{
    @if (signInManager.IsSignedIn(_httpContextAccessor.HttpContext.User))
    {
    <h4>There are currently no reviews for this book.</h4>
    }
    else
    {
    <h4>Please sign in to see reviews.</h4>
    }
}

@code {
    [Parameter]
    public string id { get; set; }
    private BookData bookData = null;
    private List<ReviewData> reviews = new List<ReviewData>();
    private ReviewData reviewData = new ReviewData();

    private string isCurrentlyReadingString = "Add to: Currently Reading";
    private bool isCurrentlyReading = false;
    private string buttonStyle1 = "btn btn-light";

    private string isWantToReadString = "Add to: Want to Read";
    private bool isWantToRead = false;
    private string buttonStyle2 = "btn btn-light";

    private string isReadString = "Add to: Read";
    private bool isRead = false;
    private string buttonStyle3 = "btn btn-light";

    protected override async Task OnInitializedAsync()
    {
        int Id = int.Parse(id);
        bookData = bookService.GetBookById(Id);
        reviews = bookService.GetReviewsByBookId(id);
        if (signInManager.IsSignedIn(_httpContextAccessor.HttpContext.User))
        {
            var user = await userManager.FindByEmailAsync(_httpContextAccessor.HttpContext.User.Identity.Name);
            if (user != null)
            {
                if (bookService.isOnBookList(user.BooksCurrentlyReading, id))
                {
                    isCurrentlyReadingString = "Remove from: Currently Reading";
                    isCurrentlyReading = true;
                    buttonStyle1 = "btn btn-dark";
                }
                if (bookService.isOnBookList(user.BooksWantToRead, id))
                {
                    isWantToReadString = "Remove from: Want to Read";
                    isWantToRead = true;
                    buttonStyle2 = "btn btn-dark";
                }
                if (bookService.isOnBookList(user.BooksRead, id))
                {
                    isReadString = "Remove from: Read";
                    isRead = true;
                    buttonStyle3 = "btn btn-dark";
                }
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!StringUtils.IsNullOrEmpty(reviewData.Description))
        {
            reviewData.User = _httpContextAccessor.HttpContext.User.Identity.Name;
            reviewData.Date = DateTime.Today.ToString("yyyy-MM-dd");
            reviewData.BookID = id;
            await bookService.AddBookReview(reviewData);
        }
        StateHasChanged();
    }

    private async void ToggleIsCurrentlyReading()
    {
        var user = await userManager.FindByEmailAsync(_httpContextAccessor.HttpContext.User.Identity.Name);
        if (isCurrentlyReading)
        {
            string newList = bookService.RemoveFromBookList(user.BooksCurrentlyReading, id);
            user.BooksCurrentlyReading = newList;
            isCurrentlyReadingString = "Add to: Currently Reading";
            isCurrentlyReading = false;
            buttonStyle1 = "btn btn-light";
        }
        else
        {
            string newList = bookService.AddToBookList(user.BooksCurrentlyReading, id);
            user.BooksCurrentlyReading = newList;
            isCurrentlyReadingString = "Remove from: Currently Reading";
            isCurrentlyReading = true;
            buttonStyle1 = "btn btn-dark";
        }
        await userManager.UpdateAsync(user);
        StateHasChanged();
    }

    private async void ToggleIsWantToRead()
    {
        var user = await userManager.FindByEmailAsync(_httpContextAccessor.HttpContext.User.Identity.Name);
        if (isWantToRead)
        {
            string newList = bookService.RemoveFromBookList(user.BooksWantToRead, id);
            user.BooksWantToRead = newList;
            isWantToReadString = "Add to: Want to Read";
            isWantToRead = false;
            buttonStyle2 = "btn btn-light";
        }
        else
        {
            string newList = bookService.AddToBookList(user.BooksWantToRead, id);
            user.BooksWantToRead = newList;
            isWantToReadString = "Remove from: Want to Read";
            isWantToRead = true;
            buttonStyle2 = "btn btn-dark";
        }
        await userManager.UpdateAsync(user);
        StateHasChanged();
    }

    private async void ToggleIsRead()
    {
        var user = await userManager.FindByEmailAsync(_httpContextAccessor.HttpContext.User.Identity.Name);
        if (isRead)
        {
            string newList = bookService.RemoveFromBookList(user.BooksRead, id);
            user.BooksRead = newList;
            isReadString = "Add to: Read";
            isRead = false;
            buttonStyle3 = "btn btn-light";
        }
        else
        {
            string newList = bookService.AddToBookList(user.BooksRead, id);
            user.BooksRead = newList;
            isReadString = "Remove from: Read";
            isRead = true;
            buttonStyle3 = "btn btn-dark";
        }
        await userManager.UpdateAsync(user);
        StateHasChanged();
    }
}
