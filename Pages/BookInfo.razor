@page "/bookinfo/{id}"

<PageTitle>Book Info</PageTitle>

@using LibraryApplication.Data
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives;
@using Microsoft.AspNetCore.Identity;

@inject BookService bookService
@inject UserManager<AppUser> userManager
@inject NavigationManager navManager

<style>
    .card {
        /* Add shadows to create the "card" effect */
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 400px;
        padding: 5px 5px;
    }

        /* On mouse-over, add a deeper shadow */
        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    /* Add some padding inside the card container */
    .container {
        padding: 0px 0px;
    }

    .img {
        width: 128px;
        height: 185px;
    }    .center {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 50%;
}.titleText{
    text-align:center;
}
</style>
    @if (bookData != null)
{
    <h1>@bookData.Title</h1>

    <p>Book Information</p>
    <div class="row">

        <div class="card">
            <img src="@bookData.ImageLink" alt="Cover" style="width:128px;height:185px"class="center">
            <div class="container">
                <h4 class="titleText"><b>@bookData.Title</b></h4>
                <p class="titleText">@bookData.Author</p>
                <p>@bookData.Description</p>
                <p>@bookData.PublishedDate</p>
            </div>
            @if (signInManager.IsSignedIn(_httpContextAccessor.HttpContext.User))
            {
                <div>
                    <button type="button" runat="server" onclick="@ToggleIsCurrentlyReading">@isCurrentlyReadingString</button>
                    <button type="button" runat="server" onclick="@ToggleIsWantToRead">@isWantToReadString</button>
                    <button type="button" runat="server" onclick="@ToggleIsRead">@isReadString</button>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string id { get; set; }
    private BookData bookData = null;
    private string isCurrentlyReadingString = "Add to: Currently Reading";
    private string isWantToReadString = "Add to: Want to Read";
    private string isReadString = "Add to: Read";
    private bool isCurrentlyReading = false;
    private bool isWantToRead = false;
    private bool isRead = false;


    protected override async Task OnInitializedAsync()
    {
        int Id = int.Parse(id);
        bookData = bookService.GetBookById(Id);
        if (signInManager.IsSignedIn(_httpContextAccessor.HttpContext.User))
        {
            var user = await userManager.FindByEmailAsync(_httpContextAccessor.HttpContext.User.Identity.Name);
            if (user != null)
            {
                if (bookService.isOnBookList(user.BooksCurrentlyReading, id))
                {
                    isCurrentlyReadingString = "Remove from: Currently Reading";
                    isCurrentlyReading = true;
                }
                if (bookService.isOnBookList(user.BooksWantToRead, id))
                {
                    isWantToReadString = "Remove from: Want to Read";
                    isWantToRead = true;
                }
                if (bookService.isOnBookList(user.BooksRead, id))
                {
                    isReadString = "Remove from: Read";
                    isRead = true;
                }
            }
        }
    }

    private async void ToggleIsCurrentlyReading()
    {
        var user = await userManager.FindByEmailAsync(_httpContextAccessor.HttpContext.User.Identity.Name);
        if (isCurrentlyReading)
        {
            string newList = bookService.RemoveFromBookList(user.BooksCurrentlyReading, id);
            user.BooksCurrentlyReading = newList;
            isCurrentlyReadingString = "Add to: Currently Reading";
            isCurrentlyReading = false;
        }
        else
        {
            string newList = bookService.AddToBookList(user.BooksCurrentlyReading, id);
            user.BooksCurrentlyReading = newList;
            isCurrentlyReadingString = "Remove from: Currently Reading";
            isCurrentlyReading = true;
        }
        await userManager.UpdateAsync(user);
        StateHasChanged();
    }

    private async void ToggleIsWantToRead()
    {
        var user = await userManager.FindByEmailAsync(_httpContextAccessor.HttpContext.User.Identity.Name);
        if (isWantToRead)
        {
            string newList = bookService.RemoveFromBookList(user.BooksWantToRead, id);
            user.BooksWantToRead = newList;
            isWantToReadString = "Add to: Want to Read";
            isWantToRead = false;
        }
        else
        {
            string newList = bookService.AddToBookList(user.BooksWantToRead, id);
            user.BooksWantToRead = newList;
            isWantToReadString = "Remove from: Want to Read";
            isWantToRead = true;
        }
        await userManager.UpdateAsync(user);
        StateHasChanged();
    }

    private async void ToggleIsRead()
    {
        var user = await userManager.FindByEmailAsync(_httpContextAccessor.HttpContext.User.Identity.Name);
        if (isRead)
        {
            string newList = bookService.RemoveFromBookList(user.BooksRead, id);
            user.BooksRead = newList;
            isReadString = "Add to: Read";
            isRead = false;
        }
        else
        {
            string newList = bookService.AddToBookList(user.BooksRead, id);
            user.BooksRead = newList;
            isReadString = "Remove from: Read";
            isRead = true;
        }
        await userManager.UpdateAsync(user);
        StateHasChanged();
    }
}
