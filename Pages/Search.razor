@page "/search"
<PageTitle>Search</PageTitle>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
@using LibraryApplication.Data
@inject BookService bookService
@inject NavigationManager navManager

<style>
    .card {
        /* Add shadows to create the "card" effect */
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 200px;
        padding: 5px 5px;
        cursor:pointer;
    }

        /* On mouse-over, add a deeper shadow */
        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    /* Add some padding inside the card container */
    .container {
        padding: 0px 0px;
    }

    .img {
        width: 128px;
        height: 185px;
    }    .center {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 50%;
}.titleText{
    text-align:center;
}
</style>
<h1>Search</h1>

<p>This component demonstrates fetching data from a service.</p>

<EditForm Model="@bookData" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <label>
            Search:
            <InputText @bind-Value="bookData.Title" />
        </label>
    </p>
    <button type="submit">Search</button>
</EditForm>

@if (data == null || data.Count <= 0)
{
    <p><em>@feedback</em></p>
}
else
{
    <div class="row">
        @if (data.Count > 0)
        {
            foreach (BookData b in data)
            {
                <div class="card" @onclick="() => Redirect(b.Id)">
                    <img src="@b.ImageLink" alt="Cover" style="width:128px;height:185px" class="center">
                    <div class="container">
                        <h4 class="titleText"><b>@b.Title</b></h4>
                        <p class="titleText">@b.Author</p>
                        <p class="titleText">@b.PublishedDate</p>
                    </div>
                </div>
            }
        }
    </div>
    <EditForm Model="@bookData" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
        @if (currentPage == 0)
        {
            <ul class="pager">
              <li><button type="button" class="btn btn-outline-secondary" style="border-radius: 12px" @onclick="NextPage">Next</button></li>
            </ul>
        }
        else
        {
            <ul class="pager">
              <li><button type="button" class="btn btn-outline-secondary" style="border-radius: 12px" @onclick="PrevPage" >Previous</button></li>
              <li><button type="button" class="btn btn-outline-secondary" style="border-radius: 12px" @onclick="NextPage">Next</button></li>
            </ul>
        }
        </EditForm>
}

@code {
    private List<BookData>? data;
    private BookData bookData = new BookData("","","","", "", "", "");
    private int currentPage = 0;
    private string feedback = "Search for books above!";
    private string next = "";
    private string prev = "";

    private async Task HandleValidSubmit()
    {
        feedback = "Searching...";
        if (!StringUtils.IsNullOrEmpty(bookData.Title))
        {
            data = await bookService.GetBookDataAsync(bookData.Title, "0");
        }

        if (data == null || data.Count <= 0)
        {
            feedback = "No books found.";
        }
    }
    private async Task NextPage()
    {
        currentPage = currentPage + 1;
        Console.Write(currentPage);
        int startIndex = currentPage * 20;
        data = await bookService.GetBookDataAsync(bookData.Title, startIndex.ToString());
    }
        private async Task PrevPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
        }
        int startIndex = currentPage * 20;
        data = await bookService.GetBookDataAsync(bookData.Title, startIndex.ToString());
    }

    private void Redirect(int? id)
    {
        navManager.NavigateTo("/BookInfo/" + id);
    }
}
